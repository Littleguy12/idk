echo "# idk" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Littleguy12/idk.git
git push -u origin main
import acm.graphics.GTurtle;
import acm.graphics.*;
import acm.graphics.GOval;
import acm.program.GraphicsProgram;
import java.awt.Color;
import java.util.Random;
import javax.swing.*;
import java.awt.event.*;
import acm.graphics.GLabel;
import java.awt.*;
import acm.util.SoundClip;
import java.util.Scanner;
import acm.io.IODialog;
public class legend extends GraphicsProgram{
boolean game1 = false;
boolean game2 = false;
boolean game3 = false;
boolean attack = false;
boolean gamestart = false;
boolean cbattc = false;
boolean cangrow = true;
boolean playagain = false;
double facing = 50; double hurt = 0; double health = 100; double score = 0; double t = 0; double size = 1; double time = 0; double healthx = 100; double exb = 10; int sizex = 2000;int sizey = 1000; double dirX1 = 0; double dirY1 = 0; double dirX2 = 0; double dirY2 = 0; double dirX3 = 0; double dirY3 = 0; GImage linkno = new GImage("link.PNG"); GImage link = new GImage("link.PNG"); GImage slime1 = new GImage("slime.PNG"); GImage slime2 = new GImage("slime.PNG"); GImage slime3 = new GImage("slime.PNG"); GRect healthy = new GRect(100, 20); GRect healthl = new GRect(100, 20); GImage linkattc = new GImage("linkattc.PNG"); GLabel gameover = new GLabel("GAME OVER"); GLabel normal = new GLabel("normal"); GLabel hard = new GLabel("hard"); GLabel oneshot = new GLabel("one shot"); GLabel sscore = new GLabel("SCORE = " + score); GRect gamevis1 = new GRect(175, 50); GRect gamevis2 = new GRect(150, 50); GRect gamevis3 = new GRect(200, 50); IODialog dialog = new IODialog(); double linkx = link.getX(); GRectangle linkbox = link.getBounds( ); GRectangle linknobox = linkno.getBounds( ); GRectangle slimebox1 = slime1.getBounds( ); GRectangle slimebox2 = slime2.getBounds( ); GRectangle slimebox3 = slime3.getBounds( ); GRectangle linkattcbox = linkattc.getBounds( ); GRectangle gamevis1box = gamevis1.getBounds( ); GRectangle gamevis2box = gamevis2.getBounds( ); GRectangle gamevis3box = gamevis3.getBounds( ); public void init(){ addKeyListeners(); addMouseListeners(); setSize(sizex, sizey); link.setVisible(true); linkno.setVisible(false); linkattc.setVisible(false); slime1.setVisible(true); slime2.setVisible(true); slime3.setVisible(true); link.setSize(50, 50); linkno.setSize(50, 50); slime1.setSize(50, 75); slime2.setSize(50, 75); slime3.setSize(50, 75); linkattc.setSize(100, 100); healthy.setColor(Color.RED); healthl.setColor(Color.GREEN); healthl.setFilled(true); healthy.setFilled(true); add(link, 1200, 500); add(linkno, 1200, 500); add(linkattc, 1200, 500); add(slime1, -100, -100); add(slime2, 2000, 1000); add(slime3, 2000, 9); add(healthy, 800, 10); add(healthl, 800, 10); add(gamevis1, 150, 10); add(gamevis2, 350, 10); add(gamevis3, 550, 10); add(gameover, -999, -9999); add(normal, 175, 50); add(hard, 375, 50); add(oneshot, 575, 50); add(sscore, 1, 20); normal.setFont("ComicSans-BOLD-40"); hard.setFont("ComicSans-BOLD-40"); oneshot.setFont("ComicSans-BOLD-40"); sscore.setFont("ComicSans-BOLD-20"); waitForClick(); while(true){ linkbox = link.getBounds( ); linknobox = linkno.getBounds( ); slimebox1 = slime1.getBounds( ); slimebox2 = slime2.getBounds( ); slimebox3 = slime3.getBounds( ); linkattcbox = linkattc.getBounds( ); gamevis1box = gamevis1.getBounds( ); gamevis2box = gamevis2.getBounds( ); gamevis3box = gamevis3.getBounds( ); gamemode(); healthbar(); follow(); slime1.move(dirX1, dirY1); slime2.move(dirX2, dirY2); slime3.move(dirX3, dirY3); if(!(size <= .47)){ size = size - .00114; } slime1.setSize(50/size, 75/size); slime2.setSize(50/size, 75/size); slime3.setSize(50/size, 75/size); System.out.println(hurt); if(!(game3==true)){ if((game1 == true)||(game2 == true)&&(exb <= 1000)){ hurt = Math.pow(size,exb); } } linkno.setLocation(linkx, link.getY()); linkattc.setLocation(link.getX(), link.getY()); sscore.setLabel("SCORE = "+score); pause(10); //boss cration if((score >= 50)&&(cangrow == true)){ size = .43; exb = -10*size; hurt = Math.pow(size,exb); cangrow = false; } if((linkbox.intersects(slimebox1))&&(hurt >= 0)){ slime1.setLocation(-999, -999); slime1.setLocation(-100, -100); } if((linkbox.intersects(slimebox2))&&(hurt >= 0)){ slime2.setLocation(-999, -999); slime2.setLocation(2000, 1000); } if((linkbox.intersects(slimebox3))&&(hurt >= 0)){ slime3.setLocation(-999, -999); slime3.setLocation(2000, 9); } if(healthx <= 0){ gameover.setLocation(700, 600); gameover.setFont("ComicSans-BOLD-60"); link.setLocation(-99999, -999999); playagain = dialog.readBoolean("playagain"); if(playagain == true){ gamestart = false; linkno.setVisible(false); linkattc.setVisible(false); slime1.setVisible(true); slime2.setVisible(true); slime3.setVisible(true); link.setSize(50, 50); linkno.setSize(50, 50); slime1.setSize(50, 75); slime2.setSize(50, 75); slime3.setSize(50, 75); linkattc.setSize(100, 100); healthy.setColor(Color.RED); healthl.setColor(Color.GREEN); healthl.setFilled(true); healthy.setFilled(true); add(link, 1200, 500); add(linkno, 1200, 500); add(linkattc, 1200, 500); add(slime1, -100, -100); add(slime2, 2000, 1000); add(slime3, 2000, 9); add(healthy, 800, 10); add(healthl, 800, 10); add(gamevis1, 150, 10); add(gamevis2, 350, 10); add(gamevis3, 550, 10); add(gameover, -999, -9999); add(normal, 175, 50); add(hard, 375, 50); add(oneshot, 575, 50); add(sscore, 1, 20); normal.setFont("ComicSans-BOLD-40"); hard.setFont("ComicSans-BOLD-40"); oneshot.setFont("ComicSans-BOLD-40"); sscore.setFont("ComicSans-BOLD-20"); healthx = 100; normal.setVisible(true); hard.setVisible(true); oneshot.setVisible(true); playagain = false; } } if((linknobox.intersects(slimebox1))&&(attack == true)){ slime1.setLocation(-999, -999); slime1.setLocation(-100, -100); score++; } if((linknobox.intersects(slimebox2))&&(attack == true)){ slime2.setLocation(-999, -999); slime2.setLocation(2000, 1000); score++; } if((linknobox.intersects(slimebox3))&&(attack == true)){ slime3.setLocation(-999, -999); slime3.setLocation(2000, 9); score++; } finish(); if(size <= 0.47){ size = size +.00114; } //if(size >= 10000){ //size = size - .1; //} System.out.println(exb); if(attack == true){ t = t +1; } if((t >= 175)&&(attack == true)){ time = time + 1; t = -5; } if((t <= -1)&&(attack == false)){ t = t + 2; } if((t <= 150)&&(attack == false)){ t--; } } } public void keyReleased(KeyEvent k){ if(k.getKeyCode() == KeyEvent.VK_SPACE){ attack = true; link.setVisible(false); linkattc.setVisible(true); time = time +1; /*link.setVisible(true); linkattc.setVisible(false); attack = false;*/ } } //movement and keys public void keyPressed(KeyEvent e){ int key = e.getKeyCode(); double linky = link.getY(); //shrink abillity if(key == KeyEvent.VK_Q){ size = 3; slime1.setSize(50/size, 75/size); slime2.setSize(50/size, 75/size); slime3.setSize(50/size, 75/size); pause(20); hurt = hurt / size; } if((e.getKeyCode() == 10)&&(gamevis1box.intersects(linkbox))){ game1 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } if((e.getKeyCode() == 10)&&(gamevis2box.intersects(linkbox))){ game2 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } if((e.getKeyCode() == 10)&&(gamevis3box.intersects(linkbox))){ game3 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } if(key == KeyEvent.VK_A){ link.move(-30, 0); linkno.move(-30, 0); linkattc.move(-30, 0); link.setSize(50, 50); linkx = link.getX(); linkbox = link.getBounds( ); linkattc.setSize(100, 100); linkattcbox = linkattc.getBounds( ); } if(key == KeyEvent.VK_D){ link.move(30, 0); linkattc.move(30, 0); linkno.move(30, 0); link.setSize(-50, 50); linkx = link.getX() -50; linkbox = link.getBounds( ); linkattc.setSize(-100, 100); linkattcbox = linkattc.getBounds( ); } if(key == KeyEvent.VK_W){ link.move(0, -30); linkno.move(0, -30); linkattc.move(0, -30); linkx = link.getX(); } if(key == KeyEvent.VK_S){ pause(6); link.move(0, 30); linkattc.move(0, 30); linkno.move(0, 30); linkx = link.getX(); } if((key == KeyEvent.VK_SPACE)&&(t >= 0)){ attack = true; link.setVisible(false); linkattc.setVisible(true); time = time++; /*link.setVisible(true); linkattc.setVisible(false); attack = false; */} } //path finding public void follow(){ double sx1 = slime1.getX(); double sy1 = slime1.getY(); double sx2 = slime2.getX(); double sy2 = slime2.getY(); double sx3 = slime3.getX(); double sy3 = slime3.getY(); double lx = linkno.getX()+5; double ly = linkno.getY()+15; if((size >=.47)&&(size <=.53)){ ly = linkno.getY()-25; } if(sx1 >= lx){ dirX1 = -3; } if(sy1 >= ly){ dirY1 = -3; } if(sx1 <= lx){ dirX1 = 3; } if(sy1 <= ly){ dirY1 = 3; } if(sx2 >= lx){ dirX2 = -4; } if(sy2 >= ly){ dirY2 = -4; } if(sx2 <= lx){ dirX2 = 4; } if(sy2 <= ly){ dirY2 = 4; } if(sx3 >= lx){ dirX3 = -5+size; } if(sy3 >= ly){ dirY3 = -5+size; } if(sx3 <= lx){ dirX3 = 5-size; } if(sy3 <= ly){ dirY3 = 5-size; } } //attack cooldown public void finish(){ if(time >= 1){ link.setVisible(true); linkattc.setVisible(false); attack = false; time = 0; } } // healthbar public void healthbar(){ if(exb <= 100000){ hurt = Math.pow(size,exb); } if((linknobox.intersects(slimebox1))&&(attack == false)){ healthx = healthx - hurt; healthl.setSize(healthx, 20); slime1.setLocation(-100, -100); } if((linknobox.intersects(slimebox2))&&(attack == false)){ healthx = healthx - hurt; healthl.setSize(healthx, 20); slime2.setLocation(2000, 100); } if((linknobox.intersects(slimebox3))&&(attack == false)){ healthx = healthx - hurt; healthl.setSize(healthx, 20); slime3.setLocation(2000, 9); } } //game select public void gamemode(){ if(game1 == true){ score = 0; game1 = false; cbattc = true; slime1.setLocation(-100, -100); slime2.setLocation(2000, 1000); slime3.setLocation(2000, 9); hurt = 10; } if(game2 == true){ score = 0; game2 = false; cbattc = true; slime1.setLocation(-100, -100); slime2.setLocation(2000, 1000); slime3.setLocation(2000, 9); hurt = 15; } if(game3 == true){ score = 0; game3 = false; cbattc = true; slime1.setLocation(-100, -100); slime2.setLocation(2000, 1000); slime3.setLocation(2000, 9); hurt = 103; } } public void mousePressed(MouseEvent m){ double mX = m.getX(); double mY = m.getY(); if(gamevis1.contains(mX, mY)){ game1 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } if(gamevis2.contains(mX, mY)){ game2 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } if(gamevis3.contains(mX, mY)){ game3 = true; gamevis1.setLocation(-999, -999); gamevis2.setLocation(-999, -999); gamevis3.setLocation(-999, -999); oneshot.setVisible(false); hard.setVisible(false); normal.setVisible(false); gamestart = true; cbattc = true; } } 
